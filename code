#include<iostream>
using namespace std;
//function prototypes
void printBoard(const char board[3][3]);
void playerTurn(char board[3][3], char player);
bool checkWin(const char board[3][3]);
bool isBoardFull(const char board[3][3]);

int main() {
	cout << "Welcome to Tic-Tac-Toe!" << endl;

	char board[3][3] = {
		{'-','-','-'}, // this makes it look like the picture
		{'-','-','-'},
		{'-','-','-'}
	}; //2D array to hold board
	char player = 'X'; //keeps track of whose turn it is
	bool endgame = false; //runs the game loop

	while (endgame == false) { //GAMELOOP
		playerTurn(board, player); //get user input
		printBoard(board); //print current board

		if (checkWin(board) == true) {
			cout << "Player" << player << "wins!" << endl;
			endgame = true; //quit gameloop
		}

		if (isBoardFull(board) && endgame == false) {
			cout << "The game is a tie!" << endl;
			endgame = true;
		}

		if (player == 'X') //if player is X, change to Y
			player = 'Y';
		//add a second conditional statement here to swap player back to X
		else if (player == 'Y')
			player = 'X';
		if (endgame == false)
			cout << "Player" << player << "'s turn!" << endl << endl;
	}

	return 0;
}
//function to print the tic tac toe board
void printBoard(const char board[3][3]) { //the mistake was this line
	for (int i = 0; i < 3; i++) { // handles rows
		for (int j = 0; j < 3; j++) { //handles columns
			cout << board[i][j] << " ";
		}
		cout << endl;
	}
}
//function to handle player input and update the board
void playerTurn(char board[3][3], char player) {
	//declare row 
	int row, col;

	//ask user for row and col and store them]
	if (player == 'X')
		cout << "Player X, type row and column to place X:" << endl;
	else
		cout << "Player O, type row and column to place O:" << endl;

	cin >> row >> col;

	//place the X 0r O into the board (minus 1 since arrrays start at 0)
	if (board[row - 1][col - 1] == '-') { //place an X for player 1
		board[row - 1][col - 1] = player;//other wise place an O
	}
	else {
		playerTurn(board, player);
	}

	cout << endl;
}
//function to check if the game has been won
bool checkWin(const char board[3][3]) {

	//check horizontal and vertical lines
	for (int i = 0; i < 3; i++) {
		//check rows
		if (board[i][0] == board[i][1] && board[i][1] == board[1][2] && board[i][0] != '-')
			return true;

		//check columns
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != '-')
			return true;

	}
	//check diagonals
	//check top left to bottom right
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != '-')
		return true;
	//check top right to bottom left
	if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != '-')
		return true;
	return false;
}
bool isBoardFull(const char board[3][3]) {
	bool full = true;

	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			if (board[i][j] == '-') {
				return false;
			}
		}
	}
	return true;
}
